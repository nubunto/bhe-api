[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {
            "value": "\n```python\nimport site\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {
            "value": "\n```python\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BOOLEAN",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FLOAT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DATETIME",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {
            "value": "\n```python\nimport sqlalchemy\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "databases",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "databases",
        "description": "databases",
        "detail": "databases",
        "documentation": {
            "value": "\n```python\nimport databases\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "from_env",
        "importPath": "env",
        "description": "env",
        "isExtraImport": true,
        "detail": "env",
        "documentation": {
            "value": "\n```python\nimport env\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {
            "value": "\n```python\nimport fastapi\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {
            "value": "\n```python\nimport fastapi.encoders\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {
            "value": "\n```python\nimport datetime\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {
            "value": "\n```python\nimport datetime\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {
            "value": "\n```python\nimport enum\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {
            "value": "\n```python\nimport pydantic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "berths",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {
            "value": "\n```python\nimport database\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cost_queue",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {
            "value": "\n```python\nimport database\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "database",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {
            "value": "\n```python\nimport database\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {
            "value": "\n```python\nimport math\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import bin_dir\n```\n\n```python\n\n\n```\n\n```python\nbin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import base\n```\n\n```python\n\n\n```\n\n```python\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import os.environ[\"PATH\"]\n```\n\n```python\n\n\n```\n\n```python\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import os.environ[\"VIRTUAL_ENV\"]\n```\n\n```python\n\n\n```\n\n```python\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import prev_length\n```\n\n```python\n\n\n```\n\n```python\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.8/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import sys.path[:]\n```\n\n```python\n\n\n```\n\n```python\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import sys.real_prefix\n```\n\n```python\n\n\n```\n\n```python\nsys.real_prefix = sys.prefix\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {
            "value": "\n```python\nfrom venv.bin.activate_this import sys.prefix\n```\n\n```python\n\n\n```\n\n```python\nsys.prefix = base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "user = from_env('DB_USER')\npassword = from_env('DB_PASSWORD')\nhost = from_env('DB_HOST')\nport = from_env('DB_PORT')\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import user\n```\n\n```python\n\n\n```\n\n```python\nuser = from_env('DB_USER')\npassword = from_env('DB_PASSWORD')\nhost = from_env('DB_HOST')\nport = from_env('DB_PORT')\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "password = from_env('DB_PASSWORD')\nhost = from_env('DB_HOST')\nport = from_env('DB_PORT')\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import password\n```\n\n```python\n\n\n```\n\n```python\npassword = from_env('DB_PASSWORD')\nhost = from_env('DB_HOST')\nport = from_env('DB_PORT')\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "host",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "host = from_env('DB_HOST')\nport = from_env('DB_PORT')\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import host\n```\n\n```python\n\n\n```\n\n```python\nhost = from_env('DB_HOST')\nport = from_env('DB_PORT')\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "port = from_env('DB_PORT')\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import port\n```\n\n```python\n\n\n```\n\n```python\nport = from_env('DB_PORT')\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "database = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import database\n```\n\n```python\n\n\n```\n\n```python\ndatabase = from_env('DB_DATABASE')\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DATABASE_CONNECTION_URI",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n    Column(\"depth\", FLOAT),",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import DATABASE_CONNECTION_URI\n```\n\n```python\n\n\n```\n\n```python\nDATABASE_CONNECTION_URI = f'postgresql://{user}:{password}@{host}:{port}/{database}'\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n    Column(\"depth\", FLOAT),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "database = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n    Column(\"depth\", FLOAT),\n)",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import database\n```\n\n```python\n\n\n```\n\n```python\ndatabase = databases.Database(DATABASE_CONNECTION_URI)\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n    Column(\"depth\", FLOAT),\n)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "metadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n    Column(\"depth\", FLOAT),\n)\ncost_queue = Table(",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import metadata\n```\n\n```python\n\n\n```\n\n```python\nmetadata = MetaData()\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n    Column(\"depth\", FLOAT),\n)\ncost_queue = Table(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "berths",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "berths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n    Column(\"depth\", FLOAT),\n)\ncost_queue = Table(\n    \"cost_queue\",",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import berths\n```\n\n```python\n\n\n```\n\n```python\nberths = Table(\n    \"berths\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"name\", VARCHAR),\n    Column(\"has_fiscalization\", BOOLEAN),\n    Column(\"depth\", FLOAT),\n)\ncost_queue = Table(\n    \"cost_queue\",\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cost_queue",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "cost_queue = Table(\n    \"cost_queue\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"ship_details\", JSON),\n    Column(\"created_at\", DATETIME),\n)\nengine = create_engine(\n    DATABASE_CONNECTION_URI\n)",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import cost_queue\n```\n\n```python\n\n\n```\n\n```python\ncost_queue = Table(\n    \"cost_queue\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"ship_details\", JSON),\n    Column(\"created_at\", DATETIME),\n)\nengine = create_engine(\n    DATABASE_CONNECTION_URI\n)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(\n    DATABASE_CONNECTION_URI\n)\n#metadata.create_all(engine)",
        "detail": "database",
        "documentation": {
            "value": "\n```python\nfrom database import engine\n```\n\n```python\n\n\n```\n\n```python\nengine = create_engine(\n    DATABASE_CONNECTION_URI\n)\n#metadata.create_all(engine)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "from_env",
        "kind": 2,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "def from_env(key: str):\n    value = os.environ.get(key)\n    if value == None:\n        raise f\"Environment variable {key} does not exist\"\n    return value",
        "detail": "env",
        "documentation": {
            "value": "\n```python\nfrom env import from_env\n```\n\n```python\n\n\n```\n\n```python\ndef from_env(key: str):\n    value = os.environ.get(key)\n    if value == None:\n        raise f\"Environment variable {key} does not exist\"\n    return value\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ShipType",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ShipType(str, Enum):\n    BulkCarrier = \"BulkCarrier\"\n    Other = \"Other\"\nclass ShipPurpose(str, Enum):\n    Dredging = \"Dredging\"\n    PortSupport = \"PortSupport\"\n    Fishing = \"Fishing\"\n    MaritimeSupport = \"MaritimeSupport\"\n    Research = \"Research\"\n    TransportBulkLiquidAndGeneral = \"TransportBulkLiquidAndGeneral\"",
        "detail": "main",
        "documentation": {
            "value": "\n```python\nfrom main import ShipType\n```\n\n```python\n\n\n```\n\n```python\nclass ShipType(str, Enum):\n    BulkCarrier = \"BulkCarrier\"\n    Other = \"Other\"\nclass ShipPurpose(str, Enum):\n    Dredging = \"Dredging\"\n    PortSupport = \"PortSupport\"\n    Fishing = \"Fishing\"\n    MaritimeSupport = \"MaritimeSupport\"\n    Research = \"Research\"\n    TransportBulkLiquidAndGeneral = \"TransportBulkLiquidAndGeneral\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ShipPurpose",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ShipPurpose(str, Enum):\n    Dredging = \"Dredging\"\n    PortSupport = \"PortSupport\"\n    Fishing = \"Fishing\"\n    MaritimeSupport = \"MaritimeSupport\"\n    Research = \"Research\"\n    TransportBulkLiquidAndGeneral = \"TransportBulkLiquidAndGeneral\"\n    GeneralTransport = \"GeneralTransport\"\n    TubeRelease = \"TubeRelease\"\n    TransportBulkSolidAndGeneral = \"TransportBulkSolidAndGeneral\"",
        "detail": "main",
        "documentation": {
            "value": "\n```python\nfrom main import ShipPurpose\n```\n\n```python\n\n\n```\n\n```python\nclass ShipPurpose(str, Enum):\n    Dredging = \"Dredging\"\n    PortSupport = \"PortSupport\"\n    Fishing = \"Fishing\"\n    MaritimeSupport = \"MaritimeSupport\"\n    Research = \"Research\"\n    TransportBulkLiquidAndGeneral = \"TransportBulkLiquidAndGeneral\"\n    GeneralTransport = \"GeneralTransport\"\n    TubeRelease = \"TubeRelease\"\n    TransportBulkSolidAndGeneral = \"TransportBulkSolidAndGeneral\"\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CargoType",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class CargoType(str, Enum):\n    Bulk = \"Bulk\"\n    General = \"General\"\nclass ShipDTO(BaseModel):\n    code: str\n    is_off_shore: bool\n    ship_name: str\n    ship_type: ShipType\n    ship_purpose: ShipPurpose\n    ship_length_in_meters: float",
        "detail": "main",
        "documentation": {
            "value": "\n```python\nfrom main import CargoType\n```\n\n```python\n\n\n```\n\n```python\nclass CargoType(str, Enum):\n    Bulk = \"Bulk\"\n    General = \"General\"\nclass ShipDTO(BaseModel):\n    code: str\n    is_off_shore: bool\n    ship_name: str\n    ship_type: ShipType\n    ship_purpose: ShipPurpose\n    ship_length_in_meters: float\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ShipDTO",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ShipDTO(BaseModel):\n    code: str\n    is_off_shore: bool\n    ship_name: str\n    ship_type: ShipType\n    ship_purpose: ShipPurpose\n    ship_length_in_meters: float\n    ship_capacity_in_teu: float\n    draft_size_in_meters: float\n    cargo_weight: float",
        "detail": "main",
        "documentation": {
            "value": "\n```python\nfrom main import ShipDTO\n```\n\n```python\n\n\n```\n\n```python\nclass ShipDTO(BaseModel):\n    code: str\n    is_off_shore: bool\n    ship_name: str\n    ship_type: ShipType\n    ship_purpose: ShipPurpose\n    ship_length_in_meters: float\n    ship_capacity_in_teu: float\n    draft_size_in_meters: float\n    cargo_weight: float\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Ship",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Ship(BaseModel):\n    code: str\n    is_off_shore: bool\n    ship_name: str\n    ship_type: ShipType\n    ship_purpose: ShipPurpose\n    ship_length_in_meters: float\n    ship_capacity_in_teu: float\n    draft_size_in_meters: float\n    cargo_weight: float",
        "detail": "main",
        "documentation": {
            "value": "\n```python\nfrom main import Ship\n```\n\n```python\n\n\n```\n\n```python\nclass Ship(BaseModel):\n    code: str\n    is_off_shore: bool\n    ship_name: str\n    ship_type: ShipType\n    ship_purpose: ShipPurpose\n    ship_length_in_meters: float\n    ship_capacity_in_teu: float\n    draft_size_in_meters: float\n    cargo_weight: float\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "calculate_priority_score_for_ship",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def calculate_priority_score_for_ship(ship: Ship):\n    cost = 1\n    if(ship.is_cargo_dangerous == True):\n        cost += 10\n    if(ship.is_cargo_important == True):\n        cost += 10\n    if(ship.has_living_animals == True):\n        cost += 10\n    if(this.calculate_is_validity_near(ship) == True):\n        cost += 10",
        "detail": "main",
        "documentation": {
            "value": "\n```python\nfrom main import calculate_priority_score_for_ship\n```\n\n```python\n\n\n```\n\n```python\ndef calculate_priority_score_for_ship(ship: Ship):\n    cost = 1\n    if(ship.is_cargo_dangerous == True):\n        cost += 10\n    if(ship.is_cargo_important == True):\n        cost += 10\n    if(ship.has_living_animals == True):\n        cost += 10\n    if(this.calculate_is_validity_near(ship) == True):\n        cost += 10\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "calculate_is_validity_near",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def calculate_is_validity_near(ship: ShipDTO):\n    validityDate = datetime.strptime(ship.cargo_validity_date, \"%Y-%m-%d\")\n    now = datetime.strptime(datetime.now(), \"%Y-%m-%d\")\n    differenceOfDays = abs((now - validityDate).days)\n    if(differenceOfDays < 30):\n        return True\n    else:\n        return False\nasync def calculate_cost_score_for_ship(ship: ShipDTO, database):\n    base_score = 10",
        "detail": "main",
        "documentation": {
            "value": "\n```python\nfrom main import calculate_is_validity_near\n```\n\n```python\n\n\n```\n\n```python\ndef calculate_is_validity_near(ship: ShipDTO):\n    validityDate = datetime.strptime(ship.cargo_validity_date, \"%Y-%m-%d\")\n    now = datetime.strptime(datetime.now(), \"%Y-%m-%d\")\n    differenceOfDays = abs((now - validityDate).days)\n    if(differenceOfDays < 30):\n        return True\n    else:\n        return False\nasync def calculate_cost_score_for_ship(ship: ShipDTO, database):\n    base_score = 10\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n@app.get(\"/\")\nasync def root():\n    return { \"message\": \"Hello, world!\" }",
        "detail": "main",
        "documentation": {
            "value": "\n```python\nfrom main import app\n```\n\n```python\n\n\n```\n\n```python\napp = FastAPI()\n@app.on_event(\"startup\")\nasync def startup():\n    await database.connect()\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    await database.disconnect()\n@app.get(\"/\")\nasync def root():\n    return { \"message\": \"Hello, world!\" }\n```\n",
            "supportThemeIcons": false
        }
    }
]